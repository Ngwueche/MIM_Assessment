@page "/loanapplications/delete"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<PageTitle>Delete</PageTitle>

<h1>Delete Loan Record</h1>

<p>Are you sure you want to delete this?</p>
<div>

    @if (loanapplication is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ApplicantName</dt>
            <dd class="col-sm-10">@loanapplication.ApplicantName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LoanTerm</dt>
            <dd class="col-sm-10">@loanapplication.LoanTerm</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LoanAmount</dt>
            <dd class="col-sm-10">@loanapplication.LoanAmount</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LoanStatus</dt>
            <dd class="col-sm-10">@loanapplication.LoanStatus</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ApplicationDate</dt>
            <dd class="col-sm-10">@loanapplication.ApplicationDate</dd>
        </dl>
        <EditForm method="post" Model="loanapplication" OnValidSubmit="DeleteLoanApplication" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(loanapplication is null)">Delete</button> |
            <a href="/loanapplications">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private GetLoanApplicationDto? loanapplication;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        loanapplication = await service.GetLoanApplicationByIdAsync(Id);

        if (loanapplication is null)
        {
            NavigationManager.NavigateTo("/notfound");
        }
        //loanapplication = loanapplicationR;
    }

    private async Task DeleteLoanApplication()
    {
        await service.DeleteLoanApplicationAsync(Id);
        NavigationManager.NavigateTo("/loanapplications");
    }
}
