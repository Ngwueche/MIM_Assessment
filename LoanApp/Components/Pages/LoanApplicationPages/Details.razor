@page "/loanapplications/details"
@rendermode InteractiveServer


<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>LoanApplication</h2>
    <hr />
    @if (loanapplication is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ApplicantName</dt>
            <dd class="col-sm-10">@loanapplication.ApplicantName</dd>
            <dt class="col-sm-2">LoanTerm</dt>
            <dd class="col-sm-10">@loanapplication.LoanTerm</dd>
            <dt class="col-sm-2">LoanAmount</dt>
            <dd class="col-sm-10">@loanapplication.LoanAmount</dd>
            <dt class="col-sm-2">LoanStatus</dt>
            <dd class="col-sm-10">@loanapplication.LoanStatus</dd>
            <dt class="col-sm-2">ApplicationDate</dt>
            <dd class="col-sm-10">@loanapplication.ApplicationDate</dd>
        </dl>
        <div>
            <button class="btn btn-success" @onclick="ApproveLoan">Approve</button>
            <button class="btn btn-danger" @onclick="RejectLoan">Reject</button>
            <a href="@($"/loanapplications/edit?id={loanapplication.Id}")">Edit</a> |
            <a href="@($"/loanapplications")">Back to List</a>
        </div>
    }
</div>

@code {
    private GetLoanApplicationDto? loanapplication;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {

        loanapplication = await service.GetLoanApplicationByIdAsync(Id);

        if (loanapplication is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task ApproveLoan()
    {
        await service.ApproveLoanApplicationRequestAsync(Id);
        NavigationManager.NavigateTo("loanapplications");


    }

    private async Task RejectLoan()
    {
        await service.RejectLoanApplicationRequestAsync(Id);
        NavigationManager.NavigateTo("loanapplications");

    }
}
