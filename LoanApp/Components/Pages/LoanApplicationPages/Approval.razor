@page "/loanapplications/approval"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Approval</PageTitle>

<h1>Approve or Decline Loan Application Request</h1>

<hr />
@if (GetLoanApplication is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="LoanApplication" OnValidSubmit="UpdateLoanApplication" FormName="edit" Enhance>
                @* <DataAnnotationsValidator /> *@
                <ValidationSummary role="alert" />
                <input type="hidden" name="LoanApplication.Id" value="@LoanApplication.Id" />
                <div class="mb-3">
                    <label for="applicantname" class="form-label">Applicant Name:</label>
                    <InputText id="applicantname" @bind-Value="LoanApplication.ApplicantName" class="form-control" />
                    <ValidationMessage For="() => LoanApplication.ApplicantName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="loanterm" class="form-label">Loan Term:</label>
                    <InputNumber id="loanterm" @bind-Value="LoanApplication.LoanTerm" class="form-control" />
                    <ValidationMessage For="() => LoanApplication.LoanTerm" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="loanamount" class="form-label">Loan Amount:</label>
                    <InputNumber id="loanamount" @bind-Value="LoanApplication.LoanAmount" class="form-control" />
                    <ValidationMessage For="() => LoanApplication.LoanAmount" class="text-danger" />
                </div>
                <hr />
                <div class="mb-3">
                    <label for="loanstatus" class="form-label">Loan Status:</label>
                    <InputNumber id="loanstatus" @bind-Value="LoanApplication.Status" class="form-control" />
                    <ValidationMessage For="() => LoanApplication.Status" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/loanapplications">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    private UpdateLoanApplicationStatusDto? LoanApplication { get; set; }
    private GetLoanApplicationDto? GetLoanApplication { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id <= 0)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        GetLoanApplication = await service.GetLoanApplicationByIdAsync(Id);
        if (GetLoanApplication is null)
        {
            NavigationManager.NavigateTo("/notfound");
        }
        else
        {
            // Map GetLoanApplicationDto to UpdateLoanApplicationDto
            LoanApplication = new UpdateLoanApplicationStatusDto
                {
                    Id = GetLoanApplication.Id,
                    Status = (int)GetLoanApplication.LoanStatus,
                    ApplicantName = GetLoanApplication.ApplicantName,
                    LoanAmount= GetLoanApplication.LoanAmount,
                    LoanTerm = GetLoanApplication.LoanTerm
                };
        }
    }

    private async Task UpdateLoanApplication()
    {
        if (LoanApplication != null)
        {
            await service.ApproveLoanApplicationRequestAsync(Id);
            NavigationManager.NavigateTo("/loanapplications");
        }
    }
}