@page "/loanapplications/create"
@rendermode InteractiveServer
<PageTitle>Create</PageTitle>

<h1>Create a Loan Request</h1>

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="LoanApplication" OnValidSubmit="AddLoanApplication" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="firstname" class="form-label">First Name</label> 
                <InputText id="firstname" @bind-Value="LoanApplication.FirstName" class="form-control" /> 
                <ValidationMessage For="() => LoanApplication.FirstName" class="text-danger" /> 
            </div> 
            <div class="mb-3">
                <label for="lastname" class="form-label">Last Name</label> 
                <InputText id="lastname" @bind-Value="LoanApplication.LastName" class="form-control" /> 
                <ValidationMessage For="() => LoanApplication.LastName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="loanterm" class="form-label">Loan Term:</label>
                <InputNumber id="loanterm" @bind-Value="LoanApplication.LoanTerm" class="form-control no-spinners" placeholder="Enter loan term in months (e.g., 12)" />
                <ValidationMessage For="() => LoanApplication.LoanTerm" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="loanamount" class="form-label">Loan Amount:</label>
                <InputNumber id="loanamount" @bind-Value="LoanApplication.LoanAmount" class="form-control no-spinners" placeholder="Enter loan amount (e.g., 1000.50)" />
                <ValidationMessage For="() => LoanApplication.LoanAmount" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/loanapplications">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm (FormName ="create")]
    private CreateLoanApplicationDto LoanApplication { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
 
    private async Task AddLoanApplication()
    {
        try
        {
        await service.AddLoanApplicationAsync(LoanApplication);

            NavigationManager.NavigateTo("/loanapplications", forceLoad: true);
        }
        catch (Exception ex)
        {
            Log.Error($"Error adding loan application: {ex.Message}\n{ex.StackTrace}");
        }
    }
}
